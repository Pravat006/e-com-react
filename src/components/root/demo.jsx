import React, { useState, useEffect } from 'react';


// CheckoutPage component handles the UI and Razorpay integration
const Demo = () => {
  // State to manage form data for shipping and billing
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '', // Added phone for Razorpay prefill
    address: '',
    city: '',
    zip: '',
    country: '',
  });

  // State to manage items in the cart (example data)
  const [cartItems, setCartItems] = useState([
    { id: 1, name: 'Premium Wireless Headphones', price: 2999, quantity: 1, imageUrl: 'https://placehold.co/100x100/A78BFA/FFFFFF?text=Product1' },
    { id: 2, name: 'Ergonomic Gaming Mouse', price: 1299, quantity: 1, imageUrl: 'https://placehold.co/100x100/60A5FA/FFFFFF?text=Product2' },
    { id: 3, name: 'Mechanical Keyboard', price: 4500, quantity: 1, imageUrl: 'https://placehold.co/100x100/F87171/FFFFFF?text=Product3' },
  ]);

  // State to indicate if payment processing is ongoing
  const [paymentProcessing, setPaymentProcessing] = useState(false);
  // State for showing a message box instead of alert
  const [messageBox, setMessageBox] = useState({ visible: false, type: '', message: '' });

  // Calculate subtotal, shipping, and total amount
  const subtotal = cartItems.reduce((acc, item) => acc + item.price * item.quantity, 0);
  const shipping = 150; // Example fixed shipping cost
  const totalAmount = subtotal + shipping;

  // Handler for input changes in the form
  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // Function to load the Razorpay script dynamically
  const loadRazorpayScript = () => {
    return new Promise((resolve) => {
      const script = document.createElement('script');
      script.src = 'https://checkout.razorpay.com/v1/checkout.js';
      script.onload = () => resolve(true); // Resolve true on successful load
      script.onerror = () => resolve(false); // Resolve false on error
      document.body.appendChild(script);
    });
  };

  // Function to handle the payment process with Razorpay
  const handlePayment = async () => {
    // Basic form validation
    if (!formData.name || !formData.email || !formData.phone || !formData.address || !formData.city || !formData.zip || !formData.country) {
      setMessageBox({ visible: true, type: 'error', message: 'Please fill in all shipping and billing details.' });
      return;
    }

    setPaymentProcessing(true); // Set processing state to true

    // Load Razorpay script
    const scriptLoaded = await loadRazorpayScript();
    if (!scriptLoaded) {
      setMessageBox({ visible: true, type: 'error', message: 'Razorpay SDK failed to load. Please check your internet connection.' });
      setPaymentProcessing(false);
      return;
    }

    // In a real application, you would make an API call to your backend
    // to create a Razorpay Order and get the `order_id`.
    // For this demo, we'll simulate a dummy order ID.
    console.log("Simulating backend call to create Razorpay Order...");

    // Dummy order ID for demonstration purposes.
    // In a production environment, this `order_id` must be generated by your backend
    // using Razorpay's server-side SDKs to ensure security and proper order tracking.
    const simulatedOrderId = `order_demo_${Date.now()}`;
    console.log("Simulated Razorpay Order ID:", simulatedOrderId);

    // Razorpay options object
    const options = {
      // Replace with your actual Test Key ID from Razorpay Dashboard
      // NEVER use your Live Key ID directly in frontend code.
      key: "rzp_test_YOUR_KEY_ID",
      amount: totalAmount * 100, // Amount in paise (e.g., 10000 paise = â‚¹100)
      currency: "INR",
      name: "Acme Store", // Your company name
      description: "Purchase from Acme Store", // Description for the payment
      image: "https://placehold.co/100x100/3B82F6/FFFFFF?text=Logo", // Your company logo URL
      order_id: simulatedOrderId, // The order_id obtained from your backend
      handler: function (response) {
        // This function is called when the payment is successful.
        // The response contains payment details.
        console.log("Razorpay Payment Response:", response);
        setMessageBox({ visible: true, type: 'success', message: `Payment successful! Payment ID: ${response.razorpay_payment_id}` });

        // IMPORTANT: In a real application, you MUST send `response.razorpay_payment_id`,
        // `response.razorpay_order_id`, and `response.razorpay_signature` to your backend
        // for server-side verification. This is crucial for security and preventing fraud.
        // Your backend will then verify the signature using your Razorpay Key Secret.
        // Example:
        // fetch('/api/verify-payment', {
        //   method: 'POST',
        //   headers: { 'Content-Type': 'application/json' },
        //   body: JSON.stringify(response)
        // }).then(res => res.json()).then(data => {
        //   if (data.status === 'success') {
        //     // Handle successful order fulfillment
        //   } else {
        //     // Handle payment verification failure
        //   }
        // });
      },
      prefill: {
        name: formData.name,
        email: formData.email,
        contact: formData.phone,
      },
      notes: {
        address: formData.address,
        city: formData.city,
        zip: formData.zip,
        country: formData.country,
      },
      theme: {
        color: "#3B82F6", // Tailwind blue-500 for the Razorpay modal
      },
      modal: {
        // Callback when the Razorpay modal is closed by the user
        ondismiss: function() {
          console.log("Razorpay checkout modal closed by user.");
          setMessageBox({ visible: true, type: 'info', message: 'Payment process cancelled by user.' });
        }
      }
    };

    // Create a new Razorpay instance and open the checkout modal
    const rzp1 = new window.Razorpay(options);
    rzp1.open();

    setPaymentProcessing(false); // Reset processing state
  };

  // MessageBox component for custom alerts
  const MessageBox = ({ visible, type, message, onClose }) => {
    if (!visible) return null;

    const bgColor = type === 'success' ? 'bg-green-100 border-green-400 text-green-700' :
                    type === 'error'   ? 'bg-red-100 border-red-400 text-red-700' :
                                         'bg-blue-100 border-blue-400 text-blue-700';
    const borderColor = type === 'success' ? 'border-green-500' :
                        type === 'error'   ? 'border-red-500' :
                                             'border-blue-500';

    return (
      <div className={`fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50`}>
        <div className={`relative p-6 rounded-lg shadow-lg max-w-sm w-full ${bgColor} border-l-4 ${borderColor}`}>
          <p className="text-lg font-semibold mb-4">{message}</p>
          <button
            onClick={onClose}
            className="absolute top-2 right-2 text-gray-500 hover:text-gray-700 text-xl font-bold"
          >
            &times;
          </button>
          <button
            onClick={onClose}
            className="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          >
            OK
          </button>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4 sm:p-6 lg:p-8">
      <div className="bg-white rounded-2xl shadow-2xl p-6 sm:p-8 lg:p-10 max-w-5xl w-full flex flex-col lg:flex-row gap-8 lg:gap-12">
        {/* Shipping and Billing Information Section */}
        <div className="flex-1 lg:w-3/5">
          <h2 className="text-3xl font-extrabold mb-8 text-gray-900 border-b-2 border-blue-200 pb-4">
            Shipping & Billing Details
          </h2>
          <form className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
              <input
                type="text"
                id="name"
                name="name"
                value={formData.name}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                placeholder="John Doe"
                required
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-1">Email Address</label>
              <input
                type="email"
                id="email"
                name="email"
                value={formData.email}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                placeholder="john.doe@example.com"
                required
              />
            </div>
            <div>
              <label htmlFor="phone" className="block text-sm font-medium text-gray-700 mb-1">Phone Number</label>
              <input
                type="tel"
                id="phone"
                name="phone"
                value={formData.phone}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                placeholder="+919876543210"
                required
              />
            </div>
            <div className="md:col-span-2">
              <label htmlFor="address" className="block text-sm font-medium text-gray-700 mb-1">Address</label>
              <input
                type="text"
                id="address"
                name="address"
                value={formData.address}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                placeholder="123 Main St"
                required
              />
            </div>
            <div>
              <label htmlFor="city" className="block text-sm font-medium text-gray-700 mb-1">City</label>
              <input
                type="text"
                id="city"
                name="city"
                value={formData.city}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                placeholder="Mumbai"
                required
              />
            </div>
            <div>
              <label htmlFor="zip" className="block text-sm font-medium text-gray-700 mb-1">Zip Code</label>
              <input
                type="text"
                id="zip"
                name="zip"
                value={formData.zip}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                placeholder="400001"
                required
              />
            </div>
            <div className="md:col-span-2">
              <label htmlFor="country" className="block text-sm font-medium text-gray-700 mb-1">Country</label>
              <input
                type="text"
                id="country"
                name="country"
                value={formData.country}
                onChange={handleInputChange}
                className="mt-1 block w-full border border-gray-300 rounded-lg shadow-sm py-2.5 px-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200"
                placeholder="India"
                required
              />
            </div>
          </form>
        </div>

        {/* Order Summary Section */}
        <div className="flex-1 lg:w-2/5 bg-blue-50 p-6 sm:p-8 rounded-2xl shadow-inner border border-blue-100">
          <h2 className="text-3xl font-extrabold mb-8 text-gray-900 border-b-2 border-blue-200 pb-4">
            Order Summary
          </h2>
          <div className="space-y-5">
            {cartItems.map((item) => (
              <div key={item.id} className="flex items-center justify-between pb-3 border-b border-blue-100 last:border-b-0">
                <div className="flex items-center gap-4">
                  <img src={item.imageUrl} alt={item.name} className="w-16 h-16 object-cover rounded-md shadow-sm" />
                  <div>
                    <span className="text-lg font-medium text-gray-800 block">{item.name}</span>
                    <span className="text-sm text-gray-500">Qty: {item.quantity}</span>
                  </div>
                </div>
                <span className="text-lg font-semibold text-gray-900">â‚¹{(item.price * item.quantity).toFixed(2)}</span>
              </div>
            ))}
          </div>

          <div className="mt-8 space-y-3 text-lg">
            <div className="flex justify-between text-gray-700">
              <span>Subtotal</span>
              <span>â‚¹{subtotal.toFixed(2)}</span>
            </div>
            <div className="flex justify-between text-gray-700">
              <span>Shipping</span>
              <span>â‚¹{shipping.toFixed(2)}</span>
            </div>
            <div className="flex justify-between text-2xl font-bold text-gray-900 border-t-2 border-blue-300 pt-5 mt-5">
              <span>Total</span>
              <span>â‚¹{totalAmount.toFixed(2)}</span>
            </div>
          </div>

          <button
            onClick={handlePayment}
            className={`mt-10 w-full py-3.5 px-6 rounded-xl text-xl font-bold text-white shadow-lg transition duration-300 ease-in-out transform ${
              paymentProcessing
                ? 'bg-blue-400 cursor-not-allowed animate-pulse'
                : 'bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-4 focus:ring-blue-300 focus:ring-offset-2 hover:-translate-y-0.5'
            }`}
            disabled={paymentProcessing}
          >
            {paymentProcessing ? 'Processing Payment...' : 'Proceed to Payment'}
          </button>
        </div>
      </div>

      {/* Render the custom message box */}
      <MessageBox
        visible={messageBox.visible}
        type={messageBox.type}
        message={messageBox.message}
        onClose={() => setMessageBox({ ...messageBox, visible: false })}
      />
    </div>
  );
};

export default Demo;
